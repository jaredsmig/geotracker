name: CI/CD Pipeline

on:
  pull_request:
    branches: [jaredsmig/issue3]
  push:
    branches: [jaredsmig/issue3]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: cd web && npm ci
      - name: Run ESLint
        run: cd web && npm run lint

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: cd web && npm ci
      - name: Build frontend
        run: cd web && npm run build
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
      - name: Restore .NET dependencies
        run: cd api && dotnet restore
      - name: Build backend
        run: cd api && dotnet build --configuration Release --no-restore

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/jaredsmig/issue3'
    steps:
      - uses: actions/checkout@v4

      # Package frontend
      - name: Install frontend dependencies
        run: cd web && npm ci
      - name: Build frontend
        run: cd web && npm run build
      - name: Prepare frontend bundle
        run: |
          mkdir -p web/deploy
          cp web/Dockerfile web/deploy/
          cp web/package.json web/deploy/
          cp web/package-lock.json web/deploy/
          cp web/.dockerignore web/deploy/ || true
          cp -r web/dist web/deploy/
      - name: Zip frontend
        run: cd web/deploy && zip -r ../../geotracker-web.zip .

      # Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      # Package backend
      - name: Publish backend
        run: cd api && dotnet publish -c Release -o publish
      - name: Prepare backend bundle
        run: |
          mkdir -p api/deploy
          cp api/Dockerfile api/deploy/
          cp api/appsettings.json api/deploy/ || true
          cp api/appsettings.Development.json api/deploy/ || true
          cp -r api/publish/* api/deploy/
      - name: Zip backend
        run: cd api/deploy && zip -r ../../geotracker-api.zip .

      # Deploy frontend
      - name: Deploy to Elastic Beanstalk (Web)
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: geotracker-web-env
          environment_name: geotracker-web-env
          version_label: ${{ github.sha }}-web
          region: us-east-1
          deployment_package: geotracker-web.zip

      # Deploy backend
      - name: Deploy to Elastic Beanstalk (API)
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: geotracker-api
          environment_name: geotracker-api-env
          version_label: ${{ github.sha }}-api
          region: us-east-1
          deployment_package: geotracker-api.zip
